# 처리할 수 없는 예외
    - 상대 네트워크 서버에 문제가 발생해서 통신이 불가능한 상황
    - 데이터베이스 서버에 문제가 발생해서 접속이 안되는 상황

    @ 시스템 오류는 예외를 잡아도 해결하기가 힘들다
    @ 이럴때, "현재 시스템에 문제가 있습니다." 라는 오류 메시지를 보여줘 개발자가 인지할 수 있게 해야한다.

# 체크 예외의 부담
    - 체크 예외는 개발자가 실수로 놓칠 수 있는 예외들을 컴파일러가 체크해주지만,
    프로그램 규모가 커지면 체크 예외를 사용하는 것이 부담스러워 진다.


    Main -----> Facade -----> Service -----> Network, DataBase, XXXXClient
  예외무더기 <==  예외무더기  <== 예외무더기

    class Facade {
        void send() throws NetworkException, DatabaseException, ...
    }

    class Service {
        void sendMessage(String data) throws NetworkException, DatabaseException, ...
    }

# 언체크(런타임) 예외 사용 시나리오

        Main -----> Facade -----> Service -----> Network, DataBase, XXXXClient
      예외무더기 <==  예외무더기  <== 예외무더기


      @@ 언체크 예외는 잡지 않으면 `throws` 선언이 없어도 자동으로 밖으로 던진다 @@ =>  @@ 예외 공통 처리 @@